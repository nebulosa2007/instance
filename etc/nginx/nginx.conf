
#user http;
worker_processes  1;
worker_rlimit_nofile 2048;

#error_log  logs/error.log;
error_log  /var/log/nginx/error.log  error;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


# Load all installed modules
include modules.d/*.conf;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    log_format withtls '$remote_addr - $remote_user [$time_local]'
               ' "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"'
               ' "$ssl_protocol" "$ssl_cipher" "$ssl_server_name"';

    access_log /var/log/nginx/access.log withtls;

    types_hash_max_size 4096;

    limit_req_zone $binary_remote_addr zone=security:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

    include    security/bad_options.conf;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #server {
        #listen       80;
        #server_name  localhost;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # HTTPS server
    #
    server {
         listen       5443 ssl proxy_protocol;
         http2        on;

         include      security/servername.conf;
    #    server_name  localhost;

         ssl_certificate     /etc/letsencrypt/nginxcerts/fullchain.pem;
         ssl_certificate_key /etc/letsencrypt/nginxcerts/privkey.pem;
         include             /etc/letsencrypt/options-ssl-nginx.conf;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

         set_real_ip_from 127.0.0.1;
         real_ip_header proxy_protocol;

         add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
         add_header X-Frame-Options "SAMEORIGIN" always;
         add_header X-Content-Type-Options "nosniff" always;
         add_header Referrer-Policy "strict-origin-when-cross-origin" always;
         add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

         include    security/security.conf;

         location / {
             limit_req zone=security burst=20 nodelay;
             try_files $uri $uri/ =404;
             root   /home/http/html;
             index  index.html index.htm;
         }

         location = /robots.txt {
             default_type text/plain;
             return 200 "User-agent: *\nDisallow: /";
         }

         include    sites-enabled/5443_*.conf;
         include    sites-enabled/static_*.conf;
    }

    server {
         listen       5443 ssl default_server;
         server_name  _;

         ssl_certificate     /etc/letsencrypt/nginxcerts/fullchain.pem;
         ssl_certificate_key /etc/letsencrypt/nginxcerts/privkey.pem;
         include             /etc/letsencrypt/options-ssl-nginx.conf;

         return     444;
   }
}
